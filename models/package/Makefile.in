SHELL = @SHELL@
@SUBMAKE@


# THESE VARIABLES MAY CHANGE BETWEEN PACKAGES

# Set `package' to the name of your package.
package := models

# Set these variables appropriately.
top_builddir := ..
subdir := elements

# Set `clicksharedir' to the Click share directory.
# Generally, you will provide a `--with-click=CLICKPREFIX' option, and set:
clicksharedir := @clickprefix@/share/click

# Set `clicksrcdir' to the Click source directory.
# Generally, you will set:
clicksrcdir := $(clicksharedir)/src

# Set `clickbindir' to the Click binary directory.
# Generally, you will set:
clickbindir := @clickprefix@/bin

# Set `clickincludedir' to the Click include directory.
# Generally, you will set:
clickincludedir := @clickprefix@/include


# Set `MAKE_UPACKAGE', `MAKE_KPACKAGE', and `MAKE_BPACKAGE' to `0' or `1' 
# to determine whether to build userlevel, linuxmodule, and bsdmodule
# packages, respectively.
MAKE_UPACKAGE = 1
MAKE_KPACKAGE = 0
MAKE_BPACKAGE = 0

# Set `STRIP_UPACKAGE' to `strip -g' to strip debugging symbols from the
# userlevel package before installing.
STRIP_UPACKAGE = true
#STRIP_UPACKAGE = $(STRIP) -g

# Set these variables as required.
DEFS = @DEFS@ 
U_INCLUDES = -I. -I$(top_builddir) -I$(srcdir) -I$(clickincludedir) -I$(clicksrcdir)
K_INCLUDES = -I. -I$(top_builddir) -I$(srcdir) -I$(clickincludedir) -I$(clicksrcdir) -I$(linuxdir)/include
B_INCLUDES = -nostdinc -I. -I$(top_builddir) -I$(srcdir) -I$(clickincludedir) -I$(clicksrcdir) -I$(freebsd_includedir)

# END OF VARIABLES THAT MAY CHANGE BETWEEN PACKAGES


# Everything below here will probably stay unchanged

srcdir = @srcdir@
top_srcdir = @top_srcdir@
conf_auxdir = @conf_auxdir@

prefix = @prefix@
exec_prefix = @exec_prefix@
bindir = @bindir@
sbindir = @sbindir@
libdir = @libdir@
mandir = @mandir@
datadir = @datadir@/click
linuxdir = @linuxdir@
freebsd_includedir = @freebsd_includedir@

VPATH = .:$(top_srcdir)/$(subdir):$(top_srcdir)

U_CC = @CC@
K_CC = @KERNEL_CC@
B_CC = @CC@
CPP = @CPP@
U_CXX = @CXX@
K_CXX = @KERNEL_CXX@
B_CXX = @KERNEL_CXX@
CXXCPP = @CXXCPP@
LD = @LD@
STRIP = @STRIP@
INSTALL = @INSTALL@
INSTALL_DATA = @INSTALL@ -m 644
mkinstalldirs = $(conf_auxdir)/mkinstalldirs

.SUFFIXES:
.SUFFIXES: .c .cc .o .uo .ko .bo .uii .kii .bii

.c.uo:
	$(U_COMPILE) -c $< -o $@
	@-sed 's/\.o:/\.uo:/' < $*.d > $*.ud; /bin/rm -f $*.d
.cc.uo:
	$(U_CXXCOMPILE) -c $< -o $@
	@-sed 's/\.o:/\.uo:/' < $*.d > $*.ud; /bin/rm -f $*.d
.cc.uii:
	$(U_CXXCOMPILE) -E $< > $@
.c.ko:
	$(K_COMPILE) -c $< -o $@
	@-sed 's/\.o:/\.ko:/' < $*.d > $*.kd; /bin/rm -f $*.d
.cc.ko:
	$(K_CXXCOMPILE) -c $< -o $@
	@-sed 's/\.o:/\.ko:/' < $*.d > $*.kd; /bin/rm -f $*.d
.cc.kii:
	$(K_CXXCOMPILE) -E $< > $@
.c.bo:
	$(B_COMPILE) -c $< -o $@
	@-sed 's/\.o:/\.bo:/' < $*.d > $*.bd; /bin/rm -f $*.d
.cc.bo:
	$(B_CXXCOMPILE) -c $< -o $@
	@-sed 's/\.o:/\.bo:/' < $*.d > $*.bd; /bin/rm -f $*.d
.cc.bii:
	$(B_CXXCOMPILE) -E $< > $@


-include elements.mk

U_OBJS = $(U_ELEMENT_OBJS) upackage.uo
K_OBJS = $(K_ELEMENT_OBJS) kpackage.ko kernelversion.ko
B_OBJS = setdef0.bo $(B_ELEMENT_OBJS) bpackage.bo setdef1.bo

U_CPPFLAGS = @CPPFLAGS@ -g -DCLICK_USERLEVEL -DCLICK_PACKAGE
K_CPPFLAGS = @CPPFLAGS@ -DCLICK_LINUXMODULE -DCLICK_PACKAGE
B_CPPFLAGS = @CPPFLAGS@ -DCLICK_BSDMODULE -DCLICK_PACKAGE
CFLAGS = @CFLAGS_NDEBUG@
CXXFLAGS = @CXXFLAGS_NDEBUG@
DEPCFLAGS = @DEPCFLAGS@

U_CXXCOMPILE = $(U_CXX) $(DEFS) $(U_INCLUDES) $(U_CPPFLAGS) $(CXXFLAGS) $(DEPCFLAGS)
K_CXXCOMPILE = $(K_CXX) $(DEFS) $(K_INCLUDES) $(K_CPPFLAGS) $(CXXFLAGS) $(DEPCFLAGS)
B_CXXCOMPILE = $(B_CXX) $(DEFS) $(B_INCLUDES) $(B_CPPFLAGS) $(CXXFLAGS) $(DEPCFLAGS)
U_COMPILE = $(U_CC) $(DEFS) $(U_INCLUDES) $(U_CPPFLAGS) $(CFLAGS) $(DEPCFLAGS)
K_COMPILE = $(K_CC) $(DEFS) $(K_INCLUDES) $(K_CPPFLAGS) $(CFLAGS) $(DEPCFLAGS)
B_COMPILE = $(B_CC) $(DEFS) $(B_INCLUDES) $(B_CPPFLAGS) $(CFLAGS) $(DEPCFLAGS)

# set TARGETS, etc. based on MAKE_UPACKAGE, MAKE_KPACKAGE, and MAKE_BPACKAGE
ifeq ($(MAKE_UPACKAGE),1)
TARGETS += $(package).uo
CONFFILES += uelements.conf
DRIVERS += userlevel
endif
ifeq ($(MAKE_KPACKAGE),1)
TARGETS += $(package).ko
CONFFILES += kelements.conf
DRIVERS += linuxmodule
endif
ifeq ($(MAKE_BPACKAGE),1)
TARGETS += $(package).bo
CONFFILES += belements.conf
DRIVERS += bsdmodule
endif

all: $(TARGETS)

$(package).uo: Makefile $(U_OBJS)
	$(LD) -shared -o $(package).uo $(U_OBJS)
	$(STRIP_UPACKAGE) $(package).uo

$(package).ko: Makefile $(K_OBJS)
	$(LD) -r -o $(package).ko $(K_OBJS)
	$(STRIP) -g $(package).ko

$(package).bo: Makefile $(B_OBJS)
	$(LD) -Bshareable -o $(package).bo $(B_OBJS)
	$(STRIP) -g $(package).bo

Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	cd $(top_builddir) \
	  && CONFIG_FILES=$(subdir)/$@ CONFIG_HEADERS= $(SHELL) ./config.status

elemlist:
	@rm -f $(CONFFILES)
	@$(MAKE) $(CONFFILES)
uelements.conf: $(clickbindir)/click-buildtool
	echo $(srcdir) | $(clickbindir)/click-buildtool findelem -r userlevel -r $(package) -e $(clicksharedir)/elementmap.xml > uelements.conf
kelements.conf: $(clickbindir)/click-buildtool
	echo $(srcdir) | $(clickbindir)/click-buildtool findelem -r linuxmodule -r $(package) -e $(clicksharedir)/elementmap.xml > kelements.conf
belements.conf: $(clickbindir)/click-buildtool
	echo $(srcdir) | $(clickbindir)/click-buildtool findelem -r bsdmodule -r $(package) -e $(clicksharedir)/elementmap.xml > belements.conf
elements.mk: $(CONFFILES) $(clickbindir)/click-buildtool
	@rm -f elements.mk
	[ ! -f uelements.conf ] || $(clickbindir)/click-buildtool elem2make -t userlevel < uelements.conf >> elements.mk
	[ ! -f kelements.conf ] || $(clickbindir)/click-buildtool elem2make -t linuxmodule < kelements.conf >> elements.mk
	[ ! -f belements.conf ] || $(clickbindir)/click-buildtool elem2make -t bsdmodule < belements.conf >> elements.mk
upackage.cc: uelements.conf $(clickbindir)/click-buildtool
	$(clickbindir)/click-buildtool elem2package $(package) < uelements.conf > upackage.cc
	@rm -f upackage.ud
kpackage.cc: kelements.conf $(clickbindir)/click-buildtool
	$(clickbindir)/click-buildtool elem2package $(package) < kelements.conf > kpackage.cc
	@rm -f kpackage.kd
bpackage.cc: belements.conf $(clickbindir)/click-buildtool
	$(clickbindir)/click-buildtool elem2package $(package) < belements.conf > bpackage.cc
	@rm -f bpackage.bd

elementmap-$(package).xml: $(clickbindir)/click-mkelemmap always
	r="$(DRIVERS) $(package)"; echo $(srcdir) | $(clickbindir)/click-buildtool findelem -r "$$r" -e $(clicksharedir)/elementmap.xml | $(clickbindir)/click-mkelemmap -r "$$r" > elementmap-$(package).xml
always:
	@:

# BSD-specific module objects
setdef0.bo: setdef0.c
setdef1.bo: setdef1.c
setdef0.c setdef1.c: bpackage.bo
	gensetdefs bpackage.bo


DEPFILES := $(wildcard *.d *.ud *.kd *.bd)
ifneq ($(DEPFILES),)
include $(DEPFILES)
endif

install: install-obj install-man elementmap-$(package).xml always
	$(mkinstalldirs) $(datadir)
	$(INSTALL_DATA) elementmap-$(package).xml $(datadir)/elementmap-$(package).xml
install-obj: $(TARGETS) always
	$(mkinstalldirs) $(libdir)
	for i in $(TARGETS); do $(INSTALL_DATA) $$i $(libdir)/$$i; done
install-man: always
	$(mkinstalldirs) $(mandir)
	$(mkinstalldirs) $(mandir)/mann
	echo $(srcdir) | $(clickbindir)/click-buildtool findelem -r "$(DRIVERS)" -r $(package) -e $(clicksharedir)/elementmap.xml | $(clickbindir)/click-elem2man -L -d $(mandir)/mann -p $(package) -f - -e $(clicksharedir)/elementmap.xml

clean:
	-rm -f *.d *.ud *.kd *.bd *.o *.uo *.ko *.bo elements.mk upackage.cc kpackage.cc bpackage.cc uelements.conf kelements.conf belements.conf elementmap-$(package).xml conftest.*
distclean: clean
	-rm -f Makefile config.h config.status config.cache config.log

.PHONY: all always clean distclean elemlist install install-obj install-man
